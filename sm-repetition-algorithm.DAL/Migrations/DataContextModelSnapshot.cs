// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using sm_repetition_algorithm.DAL.DataAccess;

#nullable disable

namespace sm_repetition_algorithm.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sm_repetition_algorithm.DAL.Entitis.Deck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("DeckAndTermId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DeckAndTermId");

                    b.HasIndex("UserId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("sm_repetition_algorithm.DAL.Entitis.DeckAndTerm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DeckId")
                        .HasColumnType("bigint");

                    b.Property<long>("TermId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DeckAndTerms");
                });

            modelBuilder.Entity("sm_repetition_algorithm.DAL.Entitis.RepetitionData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("Easiness")
                        .HasColumnType("real");

                    b.Property<int>("Interval")
                        .HasColumnType("integer");

                    b.Property<DateTime>("NextPracticeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Repetitions")
                        .HasColumnType("integer");

                    b.Property<long>("TermId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Repetitions");
                });

            modelBuilder.Entity("sm_repetition_algorithm.DAL.Entitis.Term", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DeckAndTermId")
                        .HasColumnType("bigint");

                    b.Property<string>("Example")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Transcription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeckAndTermId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("sm_repetition_algorithm.DAL.Entitis.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Sm_repetition_algorithm.DAL.Entitis.Deck", b =>
                {
                    b.HasOne("sm_repetition_algorithm.DAL.Entitis.DeckAndTerm", "DeckAndTerm")
                        .WithMany("Decs")
                        .HasForeignKey("DeckAndTermId");

                    b.HasOne("sm_repetition_algorithm.DAL.Entitis.User", "User")
                        .WithMany("Decks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeckAndTerm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sm_repetition_algorithm.DAL.Entitis.Term", b =>
                {
                    b.HasOne("sm_repetition_algorithm.DAL.Entitis.DeckAndTerm", "DeckAndTerm")
                        .WithMany("Terms")
                        .HasForeignKey("DeckAndTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeckAndTerm");
                });

            modelBuilder.Entity("sm_repetition_algorithm.DAL.Entitis.DeckAndTerm", b =>
                {
                    b.Navigation("Decs");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("sm_repetition_algorithm.DAL.Entitis.User", b =>
                {
                    b.Navigation("Decks");
                });
#pragma warning restore 612, 618
        }
    }
}
